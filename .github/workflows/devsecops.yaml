name: DevSecOps Pipeline (Step 1 - Setup)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify Environment
        run: |
          echo "‚úÖ GitHub Actions environment ready!"
          pwd
          ls -la
    
  sonar-scan:
    name: SonarQube Scan
    runs-on: self-hosted
    needs: setup

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java (required by SonarQube)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install SonarScanner (macOS ARM)
        run: |
          echo "üç∫ Installing SonarScanner ARM version..."
          arch -arm64 brew update
          arch -arm64 brew install sonar-scanner || echo "Already installed"
          arch -arm64 sonar-scanner --version 

      - name: Run SonarQube Analysis (Local)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "http://localhost:9000"
        run: |
          echo "üîç Running SonarQube analysis on local instance..."
          sonar-scanner \
            -Dsonar.projectKey=eks-3tier-app \
            -Dsonar.projectName=eks-3tier-app \
            -Dsonar.sources=. \
            -Dsonar.sourceEncoding=UTF-8 \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN

      - name: Wait for SonarQube Quality Gate Result
        env:
          SONAR_HOST_URL: "http://localhost:9000"
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "‚è≥ Checking Quality Gate status..."
          for i in {1..20}; do
            status=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=eks-3tier-app" | jq -r '.projectStatus.status')
            echo "Current status: $status"
            if [ "$status" == "OK" ]; then
              echo "‚úÖ Quality Gate PASSED!"
              exit 0
            elif [ "$status" == "ERROR" ]; then
              echo "‚ùå Quality Gate FAILED!"
              exit 1
            else
              echo "‚è≥ Waiting for analysis to finish..."
              sleep 15
            fi
          done
          echo "‚ö†Ô∏è Timed out waiting for Quality Gate result."
          exit 1


# -----------------------------
  # 3Ô∏è‚É£ Trivy IaC Config Scan (Cloud)
  # -----------------------------
  trivy-config-scan:
    runs-on: self-hosted

    steps:
      - name: üß± Checkout repository
        uses: actions/checkout@v4

      - name: üîç Run Trivy Config Scan (HTML)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: config
          format: template
          template: '@/contrib/html.tpl'
          output: trivy-config-report.html
          exit-code: 0
          severity: HIGH,CRITICAL

      - name: üì§ Upload Config Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-config-report
          path: trivy-config-report.html

  # -----------------------------
  # 4Ô∏è‚É£ Trivy Docker Image Scan (Local)
  # -----------------------------
  trivy-image-scan:
    runs-on: self-hosted
    needs: trivy-config-scan

    steps:
      - name: üß± Checkout repository
        uses: actions/checkout@v4

      - name: üê≥ Build Docker image
        run: |
          cd apps/backend/auth
          docker build -t auth-service:latest .

      - name: üîç Run Trivy Image Scan (HTML)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: auth-service:latest
          format: template
          template: '@/contrib/html.tpl'
          output: trivy-image-report.html
          exit-code: 0
          severity: HIGH,CRITICAL

      - name: üì§ Upload Image Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image-report
          path: trivy-image-report.html




  # -----------------------------
  # 5Ô∏è‚É£ Summary Stage
  # -----------------------------
  summary:
    runs-on: ubuntu-latest
    needs: trivy-image-scan
    steps:
      - name: ‚úÖ Summary
        run: echo "‚ú® All scans completed successfully ‚Äî SonarQube, Trivy Config, and Trivy Image."
 