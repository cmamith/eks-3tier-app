name: DevSecOps Pipeline (Step 1 - Setup)

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify Environment
        run: |
          echo "git add .github/workflows/devsecops.yml GitHub Actions environment ready!"
          echo "Current directory:"
          pwd
          echo "Files in repo:"
          ls -la
    
  sonar-scan:
    name: SonarQube Scan
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Java (required by SonarQube)
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Sonar Scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip -d /opt
          echo "/opt/sonar-scanner-5.0.1.3006-linux/bin" >> $GITHUB_PATH

      - name: Run SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          docker run --rm \
            -e SONAR_HOST_URL=${{ secrets.SONAR_HOST_URL }} \
            -e SONAR_TOKEN=${{ secrets.SONAR_TOKEN }} \
            -v ${{ github.workspace }}:/usr/src \
            sonarsource/sonar-scanner-cli:latest \
            sonar-scanner \
              -Dsonar.projectKey=eks-3tier-app \
              -Dsonar.projectName=eks-3tier-app \
              -Dsonar.sources=. \
              -Dsonar.sourceEncoding=UTF-8
        # run: |
        #   sonar-scanner \
        #     -Dsonar.projectKey=eks-3tier-app \
        #     -Dsonar.projectName=eks-3tier-app \
        #     -Dsonar.sources=. \
        #     -Dsonar.sourceEncoding=UTF-8 \
        #     -Dsonar.host.url=$SONAR_HOST_URL \
        #     -Dsonar.login=$SONAR_TOKEN

      - name: Wait for SonarQube Quality Gate Result
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          echo "⏳ Checking Quality Gate status..."
          for i in {1..20}; do
            status=$(curl -s -u $SONAR_TOKEN: "$SONAR_HOST_URL/api/qualitygates/project_status?projectKey=eks-3tier-app" | jq -r '.projectStatus.status')
            echo "Current status: $status"
            if [ "$status" == "OK" ]; then
              echo "✅ Quality Gate PASSED!"
              exit 0
            elif [ "$status" == "ERROR" ]; then
              echo "❌ Quality Gate FAILED!"
              exit 1
            else
              echo "⏳ Waiting for analysis to finish..."
              sleep 15
            fi
          done
          echo "⚠️ Timed out waiting for Quality Gate result."
          exit 1
