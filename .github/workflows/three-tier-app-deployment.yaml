name: Build and Deploy Selected Service to ECR and ArgoCD

on:
  workflow_dispatch:
    inputs:
      service_name:
        description: 'Service to build and deploy'
        required: true
        type: choice
        options:
          - frontend
          - auth-service
          - profile-service
        default: frontend
      image_tag:
        description: 'Docker image tag to use'
        required: true
        default: 'v1'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-southeast-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set service-specific variables
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          case "${{ github.event.inputs.service_name }}" in
            frontend)
              echo "ecr_repo=${{ secrets.FRONTEND_ECR_REPO }}" >> "$GITHUB_OUTPUT"
              echo "docker_path=apps/frontend" >> "$GITHUB_OUTPUT"
              echo "values_path=gitops-apps/apps/frontend/values.yaml" >> "$GITHUB_OUTPUT"
              ;;
            auth-service)
              echo "ecr_repo=${{ secrets.AUTH_ECR_REPO }}" >> "$GITHUB_OUTPUT"
              echo "docker_path=apps/backend/auth" >> "$GITHUB_OUTPUT"
              echo "values_path=gitops-apps/apps/auth-service/values.yaml" >> "$GITHUB_OUTPUT"
              ;;
            profile-service)
              echo "ecr_repo=${{ secrets.PROFILE_ECR_REPO }}" >> "$GITHUB_OUTPUT"
              echo "docker_path=apps/backend/profile" >> "$GITHUB_OUTPUT"
              echo "values_path=gitops-apps/apps/profile-service/values.yaml" >> "$GITHUB_OUTPUT"
              ;;
            *)
              echo "Invalid service_name: '${{ github.event.inputs.service_name }}'"; exit 1;;
          esac

      - name: Debug chosen vars
        run: |
          echo "Service:      ${{ github.event.inputs.service_name }}"
          echo "ECR repo:     ${{ steps.vars.outputs.ecr_repo }}"
          echo "Docker path:  ${{ steps.vars.outputs.docker_path }}"
          echo "Values path:  ${{ steps.vars.outputs.values_path }}"

      - name: ensure ECR repo & path exist
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${{ steps.vars.outputs.ecr_repo }}" ] || { echo "ECR repo not set"; exit 1; }
          [ -d "${{ steps.vars.outputs.docker_path }}" ] || { echo "Missing path: ${{ steps.vars.outputs.docker_path }}"; exit 1; }

      - name: Build Docker image
        run: |
          docker build -t ${{ steps.vars.outputs.repo }}:${{ github.event.inputs.image_tag }} ${{ steps.vars.outputs.build_path }}

      - name: Tag image for ECR
        run: |
          docker tag ${{ steps.vars.outputs.repo }}:${{ github.event.inputs.image_tag }} ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ steps.vars.outputs.repo }}:${{ github.event.inputs.image_tag }}

      - name: Push image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ steps.vars.outputs.repo }}:${{ github.event.inputs.image_tag }}

      - name: Checkout GitOps repo
        uses: actions/checkout@v4
        with:
          repository: cmamith/gitops-apps
          token: ${{ secrets.GITOPS_REPO_PAT }}
          path: gitops-apps

      - name: Update image tag in values.yaml
        run: |
          sed -i 's/^  tag: .*/  tag: '"${{ github.event.inputs.image_tag }}"'/' "${{ steps.vars.outputs.values_path }}"

      - name: Commit and push updated values.yaml
        working-directory: gitops-apps
        run: |
          git config user.email "cicd-bot@example.com"
          git config user.name "CI/CD Bot"
          git add ${{ steps.vars.outputs.values_path }}
          git commit -m "Update ${{ github.event.inputs.service_name }} image tag to ${{ github.event.inputs.image_tag }} [CI skip]" || echo "No changes to commit"
          git push origin main
