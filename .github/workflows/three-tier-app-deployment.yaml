name: Build and Deploy Selected Service to ECR and ArgoCD

on:
  workflow_dispatch:
    inputs:
      service_name:
        description: 'Service to build and deploy'
        required: true
        type: choice
        options:
          - frontend
          - auth-service
          - profile-service
        default: frontend
      image_tag:
        description: 'Docker image tag to use'
        required: true
        default: 'v1'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ap-southeast-1

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set service-specific variables
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          AWS_ACCT="${{ secrets.AWS_ACCOUNT_ID }}"
          REGION="${{ env.AWS_REGION }}"

          case "${{ github.event.inputs.service_name }}" in
           frontend)
            REPO_NAME="frontend-app"
            DOCKER_PATH="apps/frontend"
            VALUES_PATH="apps/frontend/values.yaml"
            ;;
          auth-service)
            REPO_NAME="auth-service"
            DOCKER_PATH="apps/backend/auth"
            VALUES_PATH="apps/auth/values.yaml"
            ;;
          profile-service)
            REPO_NAME="profile-service"
            DOCKER_PATH="apps/backend/profile"
            VALUES_PATH="apps/profile/values.yaml"
            ;;
          *) echo "Invalid service"; exit 1;;
          esac

          # Compose the FULL ECR URI: <acct>.dkr.ecr.<region>.amazonaws.com/<repo>
          echo "ecr_repo=${AWS_ACCT}.dkr.ecr.${REGION}.amazonaws.com/${REPO_NAME}" >> "$GITHUB_OUTPUT"
          echo "docker_path=${DOCKER_PATH}" >> "$GITHUB_OUTPUT"
          echo "values_path=${VALUES_PATH}" >> "$GITHUB_OUTPUT"

        # - name: Debug chosen vars
        #   run: |
        #       echo "Service:      ${{ github.event.inputs.service_name }}"
        #       echo "ECR repo:     ${{ steps.vars.outputs.ecr_repo }}"
        #       echo "Docker path:  ${{ steps.vars.outputs.docker_path }}"
        #       echo "Values path:  ${{ steps.vars.outputs.values_path }}"

        #   - name: ensure ECR repo & path exist
        #     shell: bash
        #     run: |
        #       set -euo pipefail
        #       [ -n "${{ steps.vars.outputs.ecr_repo }}" ] || { echo "ECR repo not set"; exit 1; }
        #       [ -d "${{ steps.vars.outputs.docker_path }}" ] || { echo "Missing path: ${{ steps.vars.outputs.docker_path }}"; exit 1; }


      # - name: Export vars to env
      #   run: |
      #     echo "ecr_repo=${AWS_ACCT}.dkr.ecr.${REGION}.amazonaws.com/${REPO_NAME}" >> "$GITHUB_OUTPUT"
      #     echo "docker_path=${DOCKER_PATH}" >> "$GITHUB_OUTPUT"
      #     echo "values_path=${VALUES_PATH}" >> "$GITHUB_OUTPUT"
            

      - name: Build Docker image
        run: |
          docker build -t "${{ steps.vars.outputs.ecr_repo }}:${{ github.event.inputs.image_tag }}" "${{ steps.vars.outputs.docker_path }}"

      - name: Push Docker image
        run: |
          docker push "${{ steps.vars.outputs.ecr_repo }}:${{ github.event.inputs.image_tag }}"

      - name: Checkout GitOps repo
        uses: actions/checkout@v4
        with:
          repository: cmamith/gitops-apps           # CHANGE THIS to your actual GitOps repo (org/name)
          token: ${{ secrets.GITOPS_REPO_PAT }}       # Add this token in your repo secrets
          path: gitops-apps

      - name: Update image tag in GitOps values.yaml
        working-directory: gitops-apps
        shell: bash
        run: |
          sed -i -E "s/^[[:space:]]*tag:[[:space:]]*.*/  tag: ${{ github.event.inputs.image_tag }}/" "${{ steps.vars.outputs.values_path }}"


      - name: Debug values.yaml path
        working-directory: gitops-apps
        run: |
          ls -l "${{ steps.vars.outputs.values_path }}"

      - name: Commit and push updated values.yaml
        working-directory: gitops-apps
        run: |
          git config user.email "cicd-bot@example.com"
          git config user.name "CI/CD Bot"
          git add "${{ steps.vars.outputs.values_path }}"
          git commit -m "Update ${{ github.event.inputs.service_name }} image tag to ${{ github.event.inputs.image_tag }} [CI skip]" || echo "No changes to commit"
          git push origin main
